#include <iostream>
#include "tree.h"
using namespace std;

/* Задание
1) Разработать класс бинарное дерево, включив в него методы:
    конструктор по умолчанию и вывод бинарного дерева, используя прямой обход дерева,
    разворачивая дерево горизонтально.


2) Разработать производный класс для дерева определенного вариантом. В класс включить методы:
    Конструктор с параметром (для сбалансированного дерева) – число узлов.
    Копирующий конструктор
    Деструктор
    Методы для операций, определенных в варианте.

 */


/* Вариант
 Составить программу формирующую “перекрестные ссылки”, т.е. печатающую список слов,
 которые встречаются в анализируемом файле. А для каждого слова  - список номеров строк,
 в которых это слово встречается. Информация по слову хранится в узле бинарного дерева поиска,
 упорядоченного по значению слова. Список номеров строк храниться в отдельном  связанном списке,
 указатель на который хранит соответствующий узел дерева.

    Построить дерево указанного вида
    Найти слово, встретившееся в тексте в максимальном числе строк
    Вычислить значение дерева
    Распечатать формулу дерева

 *
 */


/*
 * Добавить:
 *  1) Чтение построчно из файла с разбивкой на слова
 *  2) Запись слова в дерево (начальное зн-е колвичества = 0)
 *  3) Структура списка для хранения количества вхождений.
 *  4) Алгоритм
 *
 *
 */

int main() {

    Tree* tree = new Tree(0);
    tree->print_tree(tree, 0);
    cout << "-----------\n";

    tree = tree->insert(tree, 5);
    tree->print_tree(tree, 0);
    cout << "-----------\n";

    tree = tree->insert(tree, 6);
    tree->print_tree(tree, 0);
    cout << "-----------\n";

    tree = tree->insert(tree, 4);
    tree->print_tree(tree, 0);
    cout << "-----------\n";

    tree = tree->insert(tree, 10);
    tree->print_tree(tree, 0);
    cout << "Completed!"<< endl;

    return 0;
}